name: Poc Basic kotlin AWS Lambda With Serverless

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      #checkout repo
      - uses: actions/checkout@v2
      #configure JDK
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '14'
      #build with gradle
      - name: Build
        run: ./gradlew build
      #add files build on cache to using another job
      - name: Cache build artifacts
        uses: actions/cache@v2
        with:
          path: build/libs
          key: ${{ runner.os }}-build-${{ hashFiles('build/libs/*.jar') }}
  #Deploy to hekoru as HML
  deploy-hml:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: Hml
      url: https://test.com
    steps:
      #checkout repo
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      #Login Heroku
      - name: Login Heroku
        run: |
          cat > ~/.netrc <<EOF
            machine api.heroku.com
              login $HEROKU_EMAIL
              password $HEROKU_API_KEY
            machine git.heroku.com
              login $HEROKU_EMAIL
              password $HEROKU_API_KEY
          EOF
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
      #Push to Heroku
      - name: Add Heroku Remote
        run: heroku git:remote --app $HEROKU_APP_NAME
        env:
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
      #Deploy
      - name: Push to Heroku & Deploy
        run: |
        heroku config:set GRADLE_TASK="build"
        git push heroku HEAD:main --force

  #Deploy to AWS as HML
  deploy-prd:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: Prod
      url: https://test.com
    steps:
      #checkout repo
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: .
          include: |
            serverless.yml
      #get build files
      - name: Restore build artifacts
        uses: actions/cache@v2
        with:
          path: build/libs
          key: ${{ runner.os }}-build-${{ hashFiles('build/libs/*.jar') }}
      #deploy on aws using serverless framework
      - name: Install Plugin and Deploy
        uses: serverless/github-action@v3.1
        with:
          args: -c "serverless plugin install --name serverless-wsgi && serverless deploy"
          entrypoint: /bin/sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
